package ru.job4j.urlshortcut.model;

import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import java.net.URL;
import java.time.LocalDateTime;
import java.util.UUID;

/** Model class to transfer and store information about URL. */
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@ToString
@Entity(name = "Url")
@Table(name = "urls")
public class Url {

    /** Unique identification number generated by persistent storage. */
    @EqualsAndHashCode.Include
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "url_uuid", updatable = false)
    private UUID uuid;

    /** Unique identification number of the corresponding server (host). */
    @Column(name = "server_uuid", updatable = false)
    private UUID serverUuid;

    /** Actual URL address. */
    @Column(nullable = false, unique = true, updatable = false)
    private URL url;

    /** Date and time when the URL was registered. */
    @Column(nullable = false)
    @CreationTimestamp
    private LocalDateTime created;

    /** Date and time when the URL will be expired and no longer will be available. */
    @Column(nullable = false)
    @UpdateTimestamp
    private LocalDateTime expired;

    /** URL lifecycle and access status. */
    @Enumerated(EnumType.STRING)
    private Status status = Status.REGISTERED;

    /** URL description. */
    private String description;
}
